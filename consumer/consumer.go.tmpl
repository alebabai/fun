package consumer

// {{.Type.Title}}Consumer represents an operation that accepts a single input argument or returns an error.
type {{.Type.Title}}Consumer func(v {{.Type.Name}}) error

{{if ne .Type.Name "interface{}" }}
// ToConsumer transforms {{.Type.Title}}Consumer into Consumer
func (c {{.Type.Title}}Consumer) ToConsumer() Consumer {
	return func(v interface{}) error {
		return c(v.({{.Type.Name}}))
	}
}
{{end}}

// AndThen returns a composed {{.Type.Title}}Consumer that performs, in sequence, this operation followed by the after operation.
// If performing this operation returns an error, the after operation will not be performed.
// If after is nil, it returns original consumer.
func (c {{.Type.Title}}Consumer) AndThen(after {{.Type.Title}}Consumer) {{.Type.Title}}Consumer {
	if after != nil {
		return func(v {{.Type.Name}}) error {
			err := c(v)
			if err != nil {
				return err
			}
			return after(v)
		}
	}
	return c
}

// Silent{{.Type.Title}}Consumer represents an operation that accepts a single input argument without returning an error.
type Silent{{.Type.Title}}Consumer func(v {{.Type.Name}})

// ToSilent{{.Type.Title}}Consumer transforms {{.Type.Title}}Consumer into Silent{{.Type.Title}}Consumer
func (c {{.Type.Title}}Consumer) ToSilent{{.Type.Title}}Consumer() Silent{{.Type.Title}}Consumer {
	return func(v {{.Type.Name}}) {
		_ = c(v)
		return
	}
}

{{if ne .Type.Name "interface{}" }}
// ToSilentConsumer transforms Silent{{.Type.Title}}Consumer into SilentConsumer
func (sc Silent{{.Type.Title}}Consumer) ToSilentConsumer() SilentConsumer {
	return func(v interface{}) {
		sc(v.({{.Type.Name}}))
	}
}
{{end}}

// AndThen returns a composed Silent{{.Type.Title}}Consumer that performs, in sequence, this operation followed by the after operation.
// If after is nil, it returns original consumer.
func (sc Silent{{.Type.Title}}Consumer) AndThen(after Silent{{.Type.Title}}Consumer) Silent{{.Type.Title}}Consumer {
	if after != nil {
		return func(v {{.Type.Name}}) {
			sc(v)
			after(v)
		}
	}
	return sc
}

// Must{{.Type.Title}}Consumer represents an operation that accepts a single input argument without returning an error.
// In case of an error it should panic with error value.
type Must{{.Type.Title}}Consumer func(v {{.Type.Name}})

// ToMust{{.Type.Title}}Consumer transforms {{.Type.Title}}Consumer into Must{{.Type.Title}}Consumer
func (c {{.Type.Title}}Consumer) ToMust{{.Type.Title}}Consumer() Must{{.Type.Title}}Consumer {
	return func(v {{.Type.Name}}) {
		err := c(v)
		if err != nil {
			panic(err)
		}
		return
	}
}

{{if ne .Type.Name "interface{}" }}
// ToMustConsumer transforms Must{{.Type.Title}}Consumer into MustConsumer
func (mc Must{{.Type.Title}}Consumer) ToMustConsumer() MustConsumer {
	return func(v interface{}) {
		mc(v.({{.Type.Name}}))
	}
}
{{end}}

// AndThen returns a composed Must{{.Type.Title}}Consumer that performs, in sequence, this operation followed by the after operation.
// If performing this operation returns an error, the after operation will not be performed.
// If after is nil, it returns original consumer.
func (mc Must{{.Type.Title}}Consumer) AndThen(after Must{{.Type.Title}}Consumer) Must{{.Type.Title}}Consumer {
	if after != nil {
		return func(v {{.Type.Name}}) {
			mc(v)
			after(v)
		}
	}
	return mc
}

// To{{.Type.Title}}Consumer transforms Must{{.Type.Title}}Consumer into {{.Type.Title}}Consumer
func (mc Must{{.Type.Title}}Consumer) To{{.Type.Title}}Consumer() {{.Type.Title}}Consumer {
	return func(v {{.Type.Name}}) (err error) {
		defer func() {
			if r := recover(); r != nil {
				err = r.(error)
			}
		}()
		mc(v)
		return
	}
}

// ToSilent{{.Type.Title}}Consumer transforms Must{{.Type.Title}}Consumer into Silent{{.Type.Title}}Consumer
func (mc Must{{.Type.Title}}Consumer) ToSilent{{.Type.Title}}Consumer() Silent{{.Type.Title}}Consumer {
	c := mc.To{{.Type.Title}}Consumer()
	return c.ToSilent{{.Type.Title}}Consumer()
}
