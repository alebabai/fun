package supplier

// {{.Type}}Supplier represents a supplier of results or an error.
type {{.Type}}Supplier func() ({{.GoType}}, error)

// Silent{{.Type}}Supplier represents a supplier of results without returning an error.
// In case of an error it should just return the default value of the type.
type Silent{{.Type}}Supplier func() {{.GoType}}

{{if ne .GoType "interface{}" }}
// ToSupplier transforms {{.Type}}Supplier into Supplier
func (s {{.Type}}Supplier) ToSupplier() Supplier {
	return func() (interface{}, error) {
		return s()
	}
}
{{end}}

// ToSilent{{.Type}}Supplier transforms {{.Type}}Supplier into Silent{{.Type}}Supplier
func (s {{.Type}}Supplier) ToSilent{{.Type}}Supplier() Silent{{.Type}}Supplier {
	return func() {{.GoType}} {
		v, _ := s()
		return v
	}
}

// Must{{.Type}}Supplier represents a supplier of results without returning an error.
// In case of an error it should panic with error value.
type Must{{.Type}}Supplier func() {{.GoType}}

// ToMust{{.Type}}Supplier transforms {{.Type}}Supplier into Must{{.Type}}Supplier
func (s {{.Type}}Supplier) ToMust{{.Type}}Supplier() Must{{.Type}}Supplier {
	return func() {{.GoType}} {
		v, err := s()
		if err != nil {
			panic(err)
		}
		return v
	}
}

// To{{.Type}}Supplier transforms Must{{.Type}}Supplier into {{.Type}}Supplier
func (ms Must{{.Type}}Supplier) To{{.Type}}Supplier() {{.Type}}Supplier {
	return func() (v {{.GoType}}, err error) {
		defer func() {
			if r := recover(); r != nil {
				err = r.(error)
			}
		}()
		v = ms()
		return
	}
}

// ToSilent{{.Type}}Supplier transforms Must{{.Type}}Supplier into Silent{{.Type}}Supplier
func (ms Must{{.Type}}Supplier) ToSilent{{.Type}}Supplier() Silent{{.Type}}Supplier {
	s := ms.To{{.Type}}Supplier()
	return s.ToSilent{{.Type}}Supplier()
}
