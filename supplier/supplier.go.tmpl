package supplier

// {{.Type.Title}}Supplier represents a supplier of results or an error.
type {{.Type.Title}}Supplier func() ({{.Type.Name}}, error)

{{if ne .Type.Name "interface{}" }}
// ToSupplier transforms {{.Type.Title}}Supplier into Supplier
func (s {{.Type.Title}}Supplier) ToSupplier() Supplier {
	return func() (interface{}, error) {
		return s()
	}
}
{{end}}

// Silent{{.Type.Title}}Supplier represents a supplier of results without returning an error.
// In case of an error it should just return the default value of the type.
type Silent{{.Type.Title}}Supplier func() {{.Type.Name}}

// ToSilent{{.Type.Title}}Supplier transforms {{.Type.Title}}Supplier into Silent{{.Type.Title}}Supplier
func (s {{.Type.Title}}Supplier) ToSilent{{.Type.Title}}Supplier() Silent{{.Type.Title}}Supplier {
	return func() {{.Type.Name}} {
		v, _ := s()
		return v
	}
}

{{if ne .Type.Name "interface{}" }}
// ToSilentSupplier transforms Silent{{.Type.Title}}Supplier into SilentSupplier
func (ss Silent{{.Type.Title}}Supplier) ToSilentSupplier() SilentSupplier {
	return func() (interface{}) {
		return ss()
	}
}
{{end}}

// Must{{.Type.Title}}Supplier represents a supplier of results without returning an error.
// In case of an error it should panic with error value.
type Must{{.Type.Title}}Supplier func() {{.Type.Name}}

// ToMust{{.Type.Title}}Supplier transforms {{.Type.Title}}Supplier into Must{{.Type.Title}}Supplier
func (s {{.Type.Title}}Supplier) ToMust{{.Type.Title}}Supplier() Must{{.Type.Title}}Supplier {
	return func() {{.Type.Name}} {
		v, err := s()
		if err != nil {
			panic(err)
		}
		return v
	}
}

{{if ne .Type.Name "interface{}" }}
// ToMustSupplier transforms Must{{.Type.Title}}Supplier into MustSupplier
func (ms Must{{.Type.Title}}Supplier) ToMustSupplier() MustSupplier {
	return func() interface{} {
		return ms()
	}
}
{{end}}

// To{{.Type.Title}}Supplier transforms Must{{.Type.Title}}Supplier into {{.Type.Title}}Supplier
func (ms Must{{.Type.Title}}Supplier) To{{.Type.Title}}Supplier() {{.Type.Title}}Supplier {
	return func() (v {{.Type.Name}}, err error) {
		defer func() {
			if r := recover(); r != nil {
				err = r.(error)
			}
		}()
		v = ms()
		return
	}
}

// ToSilent{{.Type.Title}}Supplier transforms Must{{.Type.Title}}Supplier into Silent{{.Type.Title}}Supplier
func (ms Must{{.Type.Title}}Supplier) ToSilent{{.Type.Title}}Supplier() Silent{{.Type.Title}}Supplier {
	s := ms.To{{.Type.Title}}Supplier()
	return s.ToSilent{{.Type.Title}}Supplier()
}
